package strategygames.backgammon

import org.specs2.matcher.ValidatedMatchers

import strategygames.{ Player, Score, Status }

class BackgammonVariantTest extends BackgammonTest with ValidatedMatchers {

  "Backgammon Variant handles dice rolls and moves" should {
    val game = Game.apply(variant.Backgammon)

    "be valid game after first dice roll" in {
      game.diceRoll(List(3, 4)) must beValid.like { g =>
        g._1.situation.moves.values.flatten.size must_== 8
        g._1.situation.player must_== Player.P1
      }

      game.diceRoll(List(4, 3)) must beValid.like { g =>
        g._1.situation.moves.values.flatten.size must_== 8
        g._1.situation.player must_== Player.P2
      }

      game.diceRoll(List(1, 5)) must beValid.like { g =>
        g._1.situation.moves.values.flatten.size must_== 5
        g._1.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set(
          "l2k2",
          "a2e1",
          "e1f1",
          "e1j1",
          "g1h1"
        )
      }
    }

    "be valid game after first dice roll and first move" in {
      val actionStrs = List(
        "1/5",
        "l2k2"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.moves.values.flatten.size must_== 3
        g.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set(
          "k2f2",
          "a2e1",
          "e1j1"
        )
      }
    }

    "be valid game after first dice roll and first two moves" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.moves.values.flatten.size must_== 0
        g.situation.canEndTurn must_== true
      }
    }

    "be valid game after first turn" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.player must_== Player.P2
      }
    }

    "be valid game after first turn and second dice roll" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set(
          "l1j1",
          "l1h1",
          "a1b2",
          "a1d2",
          "e2g2",
          "e2i2",
          "g2i2",
          "g2k2"
        )
      }
    }

    "be valid game after first turn and second turn's dice roll and first move" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set(
          "l1h1",
          "j1f1",
          "a1d2",
          "e2i2",
          "g2k2"
        )
        g.situation.board.pieceCountOnBar(Player.P1) must_== 1
      }
    }

    "be valid game after first turn and second turn" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1",
        "g2k2",
        "endturn"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.pieceCountOnBar(Player.P1) must_== 2
        g.situation.canOnlyRollDice must_== true
      }
    }
  }

  "Backgammon Variant handles endturn" should {
    "be valid game that can endturn early" in {
      val actionStrs = List(
        "4/5",
        "l2h2",
        "a2e1",
        "endturn",
        "4/2",
        "l1h1",
        "l1j1",
        "endturn",
        "5/6",
        "e1j1",
        "l2f2",
        "endturn",
        "4/2",
        "s@k1",
        "a1d2",
        "endturn",
        "6/1",
        "e1k1",
        "j1k1",
        "endturn",
        "6/2",
        "endturn"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.unusedDice.isEmpty must_== true
        g.situation.board.usedDice.size must_== 2
        g.situation.canOnlyRollDice must_== true
      }
    }

    "be valid game that can endturn even after a single move/drop/lift" in {
      val actionStrs = List(
        "endturn",
        "3/1",
        "e2h2",
        "g2h2",
        "endturn",
        "5/3",
        "e1j1",
        "l2i2",
        "endturn",
        "4/4",
        "e2i2",
        "e2i2",
        "a1d2",
        "a1d2",
        "endturn",
        "3/1",
        "s@j2",
        "g1h1",
        "endturn",
        "1/6",
        "g2h2",
        "l1f1",
        "endturn",
        "5/5",
        "g1l1",
        "j2e2",
        "a2e1",
        "a2e1",
        "endturn",
        "1/2",
        "s@l1",
        "l1j1",
        "endturn",
        "6/5",
        "endturn",
        "5/1",
        "f1a1",
        "j1i1",
        "endturn",
        "5/3",
        "s@j2",
        "endturn"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.unusedDice.isEmpty must_== true
        g.situation.board.usedDice.size must_== 2
        g.situation.canOnlyRollDice must_== true
      }
    }
  }

  "Backgammon Variant handles drops" should {
    "be valid game and obey drop rules and must skip turn when no valid drops" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1",
        "g2k2",
        "endturn",
        "6/6"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.canMove must_== false
        g.situation.canDrop must_== false
        g.situation.canOnlyEndTurn must_== true
      }
    }

    "be valid game and obey drop rules and can capture" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1",
        "g2k2",
        "endturn",
        "2/1",
        "s@k2"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.pieceCountOnBar(Player.P1) must_== 1
        g.situation.board.pieceCountOnBar(Player.P2) must_== 1
        g.situation.canMove must_== false
        g.situation.dropsAsDrops.map(_.toUci.uci) must_== List("s@l2")
      }
    }

    "be valid game and obey drop rules and can add to own stack" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1",
        "g2k2",
        "endturn",
        "2/1",
        "s@k2",
        "s@l2",
        "endturn"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.pieceCountOnBar(Player.P1) must_== 0
        g.situation.board.pieceCountOnBar(Player.P2) must_== 1
      }
    }

    "be valid game and obey drop rules and can add to own stack" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1",
        "g2k2",
        "endturn",
        "2/1",
        "s@k2",
        "s@l2",
        "endturn",
        "6/5"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.pieceCountOnBar(Player.P2) must_== 1
        g.situation.dropsAsDrops.map(_.toUci.uci) must_== List("s@h1")
      }
    }

    "be valid game and be able to move after clearing bar" in {
      val actionStrs = List(
        "1/5",
        "l2k2",
        "e1j1",
        "endturn",
        "2/4",
        "l1j1",
        "g2k2",
        "endturn",
        "2/1",
        "s@k2",
        "s@l2",
        "endturn",
        "6/5",
        "s@h1"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.pieceCountOnBar(Player.P2) must_== 0
        g.situation.canDrop must_== false
        g.situation.canMove must_== true
        g.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set(
          "l1f1",
          "j1d1",
          "h1b1",
          "a1f2",
          "e2k2"
        )
      }
    }

  }

  "Backgammon Variant handles lifts" should {
    "be valid game that can handle a variety of lift scenarios" in {
      val actionStrs = List(
        "4/5",
        "l2h2",
        "a2e1",
        "endturn",
        "4/2",
        "l1h1",
        "l1j1",
        "endturn",
        "5/6",
        "e1j1",
        "l2f2",
        "endturn",
        "4/2",
        "s@k1",
        "a1d2",
        "endturn",
        "6/1",
        "e1k1",
        "j1k1",
        "endturn",
        "6/2",
        "endturn",
        "4/1",
        "h2d2",
        "d2c2",
        "endturn",
        "1/5",
        "s@h1",
        "s@l1",
        "endturn",
        "4/3",
        "a2d1",
        "f2c2",
        "endturn",
        "2/3",
        "h1f1",
        "g2j2",
        "endturn",
        "5/5",
        "g1l1",
        "g1l1",
        "e1j1",
        "e1j1",
        "endturn",
        "4/2",
        "s@i1",
        "g2i2",
        "endturn",
        "1/3",
        "d1e1",
        "a2c1",
        "endturn",
        "6/5",
        "a1f2",
        "f2k2",
        "endturn",
        "4/6",
        "e1i1",
        "c1i1",
        "endturn",
        "1/3",
        "endturn",
        "5/3",
        "c2c1",
        "c1f1",
        "endturn",
        "3/4",
        "endturn",
        "1/2",
        "f1h1",
        "h1i1",
        "endturn",
        "4/4",
        "endturn",
        "6/4",
        "c2d1",
        "a2d1",
        "endturn",
        "2/4",
        "endturn",
        "3/4",
        "a2c1",
        "c1g1",
        "endturn",
        "1/4",
        "endturn",
        "1/4",
        "d1h1",
        "h1i1",
        "endturn",
        "4/3",
        "endturn",
        "3/4",
        "d1g1",
        "g1k1",
        "endturn",
        "2/6",
        "endturn",
        "4/5",
        "g1k1",
        "g1l1",
        "endturn",
        "2/5",
        "s@h1",
        "endturn",
        "3/5",
        "g1j1",
        "g1l1",
        "endturn",
        "2/5",
        "s@h1",
        "endturn",
        "4/5",
        "^i1",
        "^i1",
        "endturn",
        "4/6",
        "s@g1",
        "h1d1",
        "endturn",
        "4/2",
        "^i1",
        "i1k1",
        "endturn",
        "1/6",
        "a1a2",
        "a2g2",
        "endturn",
        "6/2",
        "j1l1",
        "^j1",
        "endturn",
        "6/6",
        "h1b1",
        "d1c2",
        "c2i2",
        "g1a1",
        "endturn",
        "5/4",
        "^j1",
        "^k1"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.piecesCanLift(Player.P1) must_== true
        g.situation.board.playerPiecesOnBoardOrInPocket(Player.P1) must_== 9
        g.situation.board.history.score must_== Score(6, 0)
      }
    }
  }

  "Backgammon Variant handles restricted look ahead rules" should {
    "be valid game that forces use of dice for moves that enables both dice to be used" in {
      val actionStrs = List(
        "3/6",
        "a2f1",
        "e1h1",
        "endturn",
        "3/6",
        "a1f2",
        "a1c2",
        "endturn",
        "6/6",
        "a2f1",
        "a2f1",
        "a2f1",
        "a2f1",
        "endturn",
        "2/1",
        "c2e2",
        "e2f2",
        "endturn",
        "2/1",
        "e1g1",
        "g1h1",
        "endturn",
        "2/1",
        "g2h2",
        "h2j2",
        "endturn",
        "6/4"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        // cant use 4 on piece that is on e1 (e1i1)
        g.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set(
          "l2h2",
          "e1k1",
          "f1j1",
          "g1k1"
        )
      }
    }

    "be valid game that forces use of dice for drops that enables both dice to be used" in {
      val actionStrs = List(
        "endturn",
        "3/1",
        "e2h2",
        "g2h2",
        "endturn",
        "5/3",
        "e1j1",
        "l2i2",
        "endturn",
        "4/4",
        "e2i2",
        "e2i2",
        "a1d2",
        "a1d2",
        "endturn",
        "3/1",
        "s@j2",
        "g1h1",
        "endturn",
        "1/6",
        "g2h2",
        "l1f1",
        "endturn",
        "5/5",
        "g1l1",
        "j2e2",
        "a2e1",
        "a2e1",
        "endturn",
        "1/2",
        "s@l1",
        "l1j1",
        "endturn",
        "6/5",
        "endturn",
        "5/1",
        "f1a1",
        "j1i1",
        "endturn",
        "5/3",
        "s@j2",
        "endturn",
        "2/4",
        "a1b2",
        "b2f2",
        "endturn",
        "1/3",
        "s@j2",
        "e1f1",
        "endturn",
        "3/1",
        "i1f1",
        "d2e2",
        "endturn",
        "1/3",
        "s@j2",
        "s@l2",
        "endturn",
        "5/4",
        "f2k2",
        "g2k2",
        "endturn",
        "2/5",
        "l2j2",
        "e1j1",
        "endturn",
        "4/1",
        "e2i2",
        "d2e2",
        "endturn",
        "6/6",
        "j2d2",
        "j2d2",
        "j2d2",
        "d2c1",
        "endturn",
        "1/3",
        "f1c1",
        "c1b1",
        "endturn",
        "6/6",
        "endturn",
        "5/2",
        "a1e2",
        "a1b2",
        "endturn",
        "4/2",
        "endturn",
        "2/5",
        "h2j2",
        "e2j2",
        "endturn",
        "1/5",
        "s@l2",
        "endturn",
        "6/4",
        "b2h2",
        "b1c2",
        "endturn",
        "2/6",
        "endturn",
        "3/6",
        "a1c2",
        "e2k2",
        "endturn",
        "6/3",
        "endturn",
        "5/6",
        "c2h2",
        "c2i2",
        "endturn",
        "4/3",
        "endturn",
        "6/4",
        "^g2",
        "g2k2",
        "endturn",
        "3/5",
        "endturn",
        "3/1",
        "h2k2",
        "i2j2",
        "endturn",
        "4/5",
        "endturn",
        "1/4",
        "^i2",
        "h2i2",
        "endturn",
        "2/4",
        "endturn",
        "5/6",
        "^h2",
        "^h2",
        "endturn",
        "6/4",
        "s@g2",
        "l2h2",
        "endturn",
        "4/5",
        "^i2",
        "^i2",
        "endturn",
        "5/3",
        "e1j1",
        "l2i2",
        "endturn",
        "4/2"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        // forced to use 4 and not 2
        g.situation.dropsAsDrops.size must_== 1
        g.situation.dropsAsDrops.map(_.toUci.uci).toSet must_== Set("s@i1")
      }
    }

    // could do with a test that covers lift and forced dice

    // https://playstrategy.dev/lOx6ysxb
    "be valid game that forces use of max dice when either can be used but not both" in {
      val actionStrs = List(
        "endturn",
        "4/2",
        "g2i2",
        "e2i2",
        "endturn",
        "1/3",
        "e1h1",
        "g1h1",
        "endturn",
        "1/5",
        "g2h2",
        "a1e2",
        "endturn",
        "2/1",
        "k2j2",
        "j2h2",
        "endturn",
        "5/2",
        "s@k1",
        "a1e2",
        "endturn",
        "5/4",
        "l2h2",
        "a2e1",
        "endturn",
        "2/4",
        "i2k2",
        "e2i2",
        "endturn",
        "6/2",
        "s@k2",
        "l2f2",
        "endturn",
        "4/6",
        "s@i1",
        "a1f2",
        "endturn",
        "4/6",
        "endturn",
        "2/6",
        "k1i1",
        "e2k2",
        "endturn",
        "6/6",
        "endturn",
        "3/6",
        "f2i2",
        "e2k2",
        "endturn",
        "5/1",
        "s@h2",
        "s@l2",
        "endturn",
        "1/2",
        "e2f2",
        "a1b2",
        "endturn",
        "5/2",
        "h2f2",
        "a2e1",
        "endturn",
        "5/6",
        "endturn",
        "4/1",
        "f2b2",
        "b2a2",
        "endturn",
        "6/6",
        "endturn",
        "6/6",
        "a2f1",
        "a2f1",
        "l2f2",
        "a2f1",
        "endturn",
        "3/6",
        "s@j1",
        "endturn",
        "2/4",
        "f2b2",
        "b2a1",
        "endturn",
        "5/4",
        "s@i1",
        "i1d1",
        "endturn",
        "4/1",
        "a1e1",
        "e1f1",
        "endturn",
        "2/1",
        "k1j1",
        "k1i1",
        "endturn",
        "3/5",
        "h2c2",
        "c2a1",
        "endturn",
        "6/1",
        "j1d1",
        "g2h2",
        "endturn",
        "2/3",
        "s@j2",
        "j2h2",
        "endturn",
        "2/1",
        "s@k1",
        "g2h2",
        "endturn",
        "3/4",
        "s@j2",
        "f1j1",
        "endturn",
        "4/5",
        "s@i1",
        "i1d1",
        "endturn",
        "6/5",
        "e1j1",
        "a1g1",
        "endturn",
        "2/5",
        "h2j2",
        "i1d1",
        "endturn",
        "1/2",
        "s@l2",
        "l2j2",
        "endturn",
        "2/6",
        "s@k1",
        "d1c2",
        "endturn",
        "5/4",
        "j2e2",
        "e2a2",
        "endturn",
        "2/1",
        "c2d2",
        "d2f2",
        "endturn",
        "4/6",
        "a2f1",
        "f1j1",
        "endturn",
        "2/1",
        "f2h2",
        "h2i2",
        "endturn",
        "4/4",
        "f1j1",
        "f1j1",
        "f1j1",
        "endturn",
        "3/4",
        "d1a1",
        "a1d2",
        "endturn",
        "5/5",
        "e1j1",
        "e1j1",
        "e1j1",
        "^h1",
        "endturn",
        "3/5",
        "d2i2",
        "k1h1",
        "endturn",
        "5/4",
        "s@h2",
        "h2d2",
        "endturn",
        "6/3",
        "k1e1",
        "h1e1",
        "endturn",
        "5/6",
        "d2c1",
        "c1h1",
        "endturn",
        "5/2",
        "d1b2",
        "b2d2",
        "endturn",
        "2/3",
        "h1k1",
        "^k1",
        "endturn",
        "4/6",
        "d2h2",
        "d1c2",
        "endturn",
        "6/4",
        "^g1",
        "g1k1",
        "endturn",
        "1/3",
        "l1i1",
        "l1k1",
        "endturn",
        "4/2",
        "endturn",
        "4/4",
        "c2g2",
        "g2k2",
        "i1e1",
        "h2l2",
        "endturn",
        "2/2",
        "endturn",
        "3/6",
        "i2l2",
        "k1e1",
        "endturn",
        "5/6",
        "s@g2",
        "g2b2",
        "endturn",
        "1/4",
        "k2l2",
        "e1a1",
        "endturn",
        "1/2",
        "b2a1",
        "a1b1",
        "endturn",
        "4/1",
        "s@i1",
        "e1d1",
        "endturn",
        "2/4",
        "b1d1",
        "d1h1",
        "endturn",
        "2/1",
        "s@k1",
        "i1h1",
        "endturn",
        "5/2",
        "s@h2",
        "h2f2",
        "endturn",
        "5/1",
        "k1f1",
        "f1e1",
        "endturn",
        "6/4",
        "f2a1",
        "g1k1",
        "endturn",
        "3/4",
        "h1d1",
        "d1a1",
        "endturn",
        "2/5",
        "s@h2",
        "h2f2",
        "endturn",
        "3/3",
        "a1c2",
        "c2f2",
        "i2l2",
        "f2i2",
        "endturn",
        "2/1",
        "endturn",
        "6/1",
        "e1d1",
        "d1c2",
        "endturn",
        "2/1",
        "endturn",
        "3/6",
        "c2i2",
        "i2l2",
        "endturn",
        "3/4",
        "s@j2",
        "g1k1",
        "endturn",
        "2/3",
        "i2l2",
        "i2k2",
        "endturn",
        "1/5",
        "j2e2",
        "j1k1",
        "endturn",
        "1/2",
        "i2k2",
        "i2j2",
        "endturn",
        "6/3"
      )
      playActionStrs(actionStrs, Some(Game.apply(variant.Nackgammon))) must beValid.like { g =>
        g.situation.moves.values.flatten.map(_.toUci.uci).toSet must_== Set("e2b1")
      }
    }
  }

  "Backgammon Variant has different win statuses" should {
    "be valid game that ends in a GammonWin when 15-0 and no pieces in opponents home" in {
      val actionStrs = List(
        "4/5",
        "l2h2",
        "a2e1",
        "endturn",
        "4/2",
        "l1h1",
        "l1j1",
        "endturn",
        "5/6",
        "e1j1",
        "l2f2",
        "endturn",
        "4/2",
        "s@k1",
        "a1d2",
        "endturn",
        "6/1",
        "e1k1",
        "j1k1",
        "endturn",
        "6/2",
        "endturn",
        "4/1",
        "h2d2",
        "d2c2",
        "endturn",
        "1/5",
        "s@h1",
        "s@l1",
        "endturn",
        "4/3",
        "a2d1",
        "f2c2",
        "endturn",
        "2/3",
        "h1f1",
        "g2j2",
        "endturn",
        "5/5",
        "g1l1",
        "g1l1",
        "e1j1",
        "e1j1",
        "endturn",
        "4/2",
        "s@i1",
        "g2i2",
        "endturn",
        "1/3",
        "d1e1",
        "a2c1",
        "endturn",
        "6/5",
        "a1f2",
        "f2k2",
        "endturn",
        "4/6",
        "e1i1",
        "c1i1",
        "endturn",
        "1/3",
        "endturn",
        "5/3",
        "c2c1",
        "c1f1",
        "endturn",
        "3/4",
        "endturn",
        "1/2",
        "f1h1",
        "h1i1",
        "endturn",
        "4/4",
        "endturn",
        "6/4",
        "c2d1",
        "a2d1",
        "endturn",
        "2/4",
        "endturn",
        "3/4",
        "a2c1",
        "c1g1",
        "endturn",
        "1/4",
        "endturn",
        "1/4",
        "d1h1",
        "h1i1",
        "endturn",
        "4/3",
        "endturn",
        "3/4",
        "d1g1",
        "g1k1",
        "endturn",
        "2/6",
        "endturn",
        "4/5",
        "g1k1",
        "g1l1",
        "endturn",
        "2/5",
        "s@h1",
        "endturn",
        "3/5",
        "g1j1",
        "g1l1",
        "endturn",
        "2/5",
        "s@h1",
        "endturn",
        "4/5",
        "^i1",
        "^i1",
        "endturn",
        "4/6",
        "s@g1",
        "h1d1",
        "endturn",
        "4/2",
        "^i1",
        "i1k1",
        "endturn",
        "1/6",
        "a1a2",
        "a2g2",
        "endturn",
        "6/2",
        "j1l1",
        "^j1",
        "endturn",
        "6/6",
        "h1b1",
        "d1c2",
        "c2i2",
        "g1a1",
        "endturn",
        "5/4",
        "^j1",
        "^k1",
        "endturn",
        "4/4",
        "b1c2",
        "c2g2",
        "a1d2",
        "a1d2",
        "endturn",
        "6/4",
        "^k1",
        "^k1",
        "endturn",
        "3/1",
        "d2g2",
        "a1a2",
        "endturn",
        "3/2",
        "^k1",
        "^k1",
        "endturn",
        "5/2",
        "d2i2",
        "e2g2",
        "endturn",
        "6/3",
        "^l1",
        "^l1",
        "endturn",
        "3/4",
        "a2d2",
        "d2h2",
        "endturn",
        "4/6",
        "^l1",
        "^l1",
        "endturn",
        "3/6",
        "e2h2",
        "e2k2",
        "endturn",
        "4/1",
        "^l1"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.history.score must_== Score(15, 0)
        g.situation.end must_== true
        g.situation.board.pieceInOpponentsHome(Player.P2) must_== false
        g.situation.winner must_== Some(Player.P1)
        g.situation.status must_== Some(Status.GammonWin)
      }
    }

    "be valid game that ends in a StandardWin when both sides score" in {
      val actionStrs = List(
        "endturn",
        "3/1",
        "e2h2",
        "g2h2",
        "endturn",
        "5/3",
        "e1j1",
        "l2i2",
        "endturn",
        "4/4",
        "e2i2",
        "e2i2",
        "a1d2",
        "a1d2",
        "endturn",
        "3/1",
        "s@j2",
        "g1h1",
        "endturn",
        "1/6",
        "g2h2",
        "l1f1",
        "endturn",
        "5/5",
        "g1l1",
        "j2e2",
        "a2e1",
        "a2e1",
        "endturn",
        "1/2",
        "s@l1",
        "l1j1",
        "endturn",
        "6/5",
        "endturn",
        "5/1",
        "f1a1",
        "j1i1",
        "endturn",
        "5/3",
        "s@j2",
        "endturn",
        "2/4",
        "a1b2",
        "b2f2",
        "endturn",
        "1/3",
        "s@j2",
        "e1f1",
        "endturn",
        "3/1",
        "i1f1",
        "d2e2",
        "endturn",
        "1/3",
        "s@j2",
        "s@l2",
        "endturn",
        "5/4",
        "f2k2",
        "g2k2",
        "endturn",
        "2/5",
        "l2j2",
        "e1j1",
        "endturn",
        "4/1",
        "e2i2",
        "d2e2",
        "endturn",
        "6/6",
        "j2d2",
        "j2d2",
        "j2d2",
        "d2c1",
        "endturn",
        "1/3",
        "f1c1",
        "c1b1",
        "endturn",
        "6/6",
        "endturn",
        "5/2",
        "a1e2",
        "a1b2",
        "endturn",
        "4/2",
        "endturn",
        "2/5",
        "h2j2",
        "e2j2",
        "endturn",
        "1/5",
        "s@l2",
        "endturn",
        "6/4",
        "b2h2",
        "b1c2",
        "endturn",
        "2/6",
        "endturn",
        "3/6",
        "a1c2",
        "e2k2",
        "endturn",
        "6/3",
        "endturn",
        "5/6",
        "c2h2",
        "c2i2",
        "endturn",
        "4/3",
        "endturn",
        "6/4",
        "^g2",
        "g2k2",
        "endturn",
        "3/5",
        "endturn",
        "3/1",
        "h2k2",
        "i2j2",
        "endturn",
        "4/5",
        "endturn",
        "1/4",
        "^i2",
        "h2i2",
        "endturn",
        "2/4",
        "endturn",
        "5/6",
        "^h2",
        "^h2",
        "endturn",
        "6/4",
        "s@g2",
        "l2h2",
        "endturn",
        "4/5",
        "^i2",
        "^i2",
        "endturn",
        "5/3",
        "e1j1",
        "l2i2",
        "endturn",
        "4/2",
        "s@i1",
        "j2l2",
        "endturn",
        "6/4",
        "e1i1",
        "h2b2",
        "endturn",
        "6/6",
        "endturn",
        "1/1",
        "g1h1",
        "h1i1",
        "a2a1",
        "a2a1",
        "endturn",
        "5/3",
        "s@h1",
        "h1e1",
        "endturn",
        "6/2",
        "s@g2",
        "d2b2",
        "endturn",
        "1/6",
        "e1d1",
        "d1c2",
        "endturn",
        "2/2",
        "g2e2",
        "e2c2",
        "a1c1",
        "a1c1",
        "endturn",
        "2/6",
        "s@k1",
        "k1e1",
        "endturn",
        "1/5",
        "a2e1",
        "g2f2",
        "endturn",
        "4/6",
        "endturn",
        "1/4",
        "b2a2",
        "b2c1",
        "endturn",
        "1/1",
        "s@l1",
        "k2l2",
        "l1k1",
        "k2l2",
        "endturn",
        "1/6",
        "e1k1",
        "c1d1",
        "endturn",
        "6/4",
        "endturn",
        "6/4",
        "a2f1",
        "f1j1",
        "endturn",
        "1/5",
        "s@h1",
        "k2l2",
        "endturn",
        "3/5",
        "c1h1",
        "h1k1",
        "endturn",
        "4/6",
        "endturn",
        "4/4",
        "c2b1",
        "d2a1",
        "f2b2",
        "b2c1",
        "endturn",
        "3/6",
        "endturn",
        "5/4",
        "c1h1",
        "d1h1",
        "endturn",
        "5/1",
        "s@l1",
        "endturn",
        "2/1",
        "a1c1",
        "i2h2",
        "endturn",
        "5/5",
        "endturn",
        "2/5",
        "h2f2",
        "b1g1",
        "endturn",
        "2/6",
        "l1f1",
        "f1d1",
        "endturn",
        "1/1",
        "c1d1",
        "c1d1",
        "f2e2",
        "e2d2",
        "endturn",
        "5/1",
        "s@l1",
        "endturn",
        "1/1",
        "d1e1",
        "d1e1",
        "e1f1",
        "e1f1",
        "endturn",
        "3/3",
        "endturn",
        "1/4",
        "d2c2",
        "c2b1",
        "endturn",
        "4/5",
        "endturn",
        "2/4",
        "b1d1",
        "d1h1",
        "endturn",
        "2/4",
        "j2l2",
        "endturn",
        "2/3",
        "f1h1",
        "f1i1",
        "endturn",
        "1/4",
        "j2k2",
        "endturn",
        "6/3",
        "^g1",
        "^j1",
        "endturn",
        "4/3",
        "endturn",
        "1/6",
        "g1h1",
        "^g1",
        "endturn",
        "3/4",
        "endturn",
        "6/3",
        "^h1",
        "i1l1",
        "endturn",
        "4/2",
        "endturn",
        "1/5",
        "^l1",
        "^h1",
        "endturn",
        "6/2",
        "s@g1",
        "g1e1",
        "endturn",
        "6/1",
        "^h1",
        "k1l1",
        "endturn",
        "2/3",
        "e1c1",
        "c1a2",
        "endturn",
        "1/4",
        "^l1",
        "^i1",
        "endturn",
        "1/5",
        "a2b2",
        "b2g2",
        "endturn",
        "5/6",
        "^h1",
        "^h1",
        "endturn",
        "3/6",
        "^g2",
        "^k2",
        "endturn",
        "1/4",
        "k1l1",
        "^i1",
        "endturn",
        "6/3",
        "^k2",
        "^k2",
        "endturn",
        "4/1",
        "^j1",
        "^l1",
        "endturn",
        "3/6",
        "^l2",
        "^l2",
        "endturn",
        "5/3",
        "^j1"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.history.score must_== Score(15, 12)
        g.situation.end must_== true
        g.situation.winner must_== Some(Player.P1)
        g.situation.status must_== Some(Status.SingleWin)
      }
    }

    "be valid game that ends in a BackgammonWin when one side has pieces in opponent home" in {
      val actionStrs = List(
        "endturn",
        "5/1",
        "a1e2",
        "l1k1",
        "endturn",
        "6/5",
        "a2f1",
        "f1k1",
        "endturn",
        "1/2",
        "s@k1",
        "l1k1",
        "endturn",
        "3/4",
        "s@j2",
        "j2f2",
        "endturn",
        "1/6",
        "a1f2",
        "e2f2",
        "endturn",
        "2/6",
        "s@k2",
        "a2f1",
        "endturn",
        "3/2",
        "k1h1",
        "h1f1",
        "endturn",
        "6/4",
        "s@i2",
        "a2f1",
        "endturn",
        "4/1",
        "s@i1",
        "i1h1",
        "endturn",
        "2/2",
        "k2i2",
        "f1h1",
        "g1i1",
        "i1k1",
        "endturn",
        "1/4",
        "s@i1",
        "s@l1",
        "endturn",
        "1/6",
        "h1i1",
        "e1k1",
        "endturn",
        "4/3",
        "s@i1",
        "l1i1",
        "endturn",
        "1/3",
        "s@l2",
        "l2i2",
        "endturn",
        "6/1",
        "a1f2",
        "i1h1",
        "endturn",
        "5/3",
        "e1j1",
        "e1h1",
        "endturn",
        "6/1",
        "s@l1",
        "i1c1",
        "endturn",
        "2/3",
        "h1j1",
        "a2c1",
        "endturn",
        "2/5",
        "s@h1",
        "h1f1",
        "endturn",
        "2/1",
        "c1d1",
        "d1f1",
        "endturn",
        "1/1",
        "s@l1",
        "g2h2",
        "g2h2",
        "a1a2",
        "endturn",
        "4/3",
        "s@i2",
        "f1i1",
        "endturn",
        "3/4",
        "l1h1",
        "l1i1",
        "endturn",
        "6/2",
        "s@k2",
        "i2c2",
        "endturn",
        "6/6",
        "e2k2",
        "e2k2",
        "h1b1",
        "b1e2",
        "endturn",
        "5/2",
        "endturn",
        "1/4",
        "i1e1",
        "a1a2",
        "endturn",
        "2/1",
        "s@l2",
        "l2j2",
        "endturn",
        "5/4",
        "e2j2",
        "f2j2",
        "endturn",
        "6/2",
        "endturn",
        "3/2",
        "a2c2",
        "e1b1",
        "endturn",
        "5/3",
        "endturn",
        "3/1",
        "a2d2",
        "d2e2",
        "endturn",
        "5/1",
        "s@l2",
        "endturn",
        "1/5",
        "b1d2",
        "c2d2",
        "endturn",
        "4/1",
        "s@l2",
        "g1k1",
        "endturn",
        "3/5",
        "e2j2",
        "e2h2",
        "endturn",
        "3/3",
        "l2i2",
        "g1j1",
        "g1j1",
        "g1j1",
        "endturn",
        "4/3",
        "d2h2",
        "d2g2",
        "endturn",
        "5/5",
        "i2d2",
        "d2b1",
        "i2d2",
        "d2b1",
        "endturn",
        "5/3",
        "h2k2",
        "f2k2",
        "endturn",
        "2/3",
        "i2f2",
        "f2d2",
        "endturn",
        "5/4",
        "s@h1",
        "h1d1",
        "endturn",
        "3/6",
        "l2i2",
        "d2c1",
        "endturn",
        "6/2",
        "d1c2",
        "c2e2",
        "endturn",
        "1/3",
        "i2f2",
        "f2e2",
        "endturn",
        "4/2",
        "s@i1",
        "i1g1",
        "endturn",
        "4/6",
        "c1g1",
        "e2b1",
        "endturn",
        "1/2",
        "s@l1",
        "g2i2",
        "endturn",
        "6/5",
        "endturn",
        "1/5",
        "h2i2",
        "l1g1",
        "endturn",
        "4/3",
        "endturn",
        "2/3",
        "g1d1",
        "g2i2",
        "endturn",
        "5/3",
        "endturn",
        "6/1",
        "d1c2",
        "c2d2",
        "endturn",
        "1/3",
        "s@l2",
        "endturn",
        "3/2",
        "d2g2",
        "g2i2",
        "endturn",
        "5/5",
        "endturn",
        "4/4",
        "^i2",
        "^i2",
        "^i2",
        "^i2",
        "endturn",
        "1/1",
        "s@l2",
        "j1k1",
        "k1l1",
        "k1l1",
        "endturn",
        "6/1",
        "^g2",
        "g2h2",
        "endturn",
        "4/5",
        "b1g1",
        "g1k1",
        "endturn",
        "5/1",
        "^h2",
        "j2k2",
        "endturn",
        "3/2",
        "l2i2",
        "i2g2",
        "endturn",
        "6/3",
        "^h2",
        "h2k2",
        "endturn",
        "2/2",
        "b1d1",
        "b1d1",
        "d1f1",
        "d1f1",
        "endturn",
        "5/5",
        "^j2",
        "^j2",
        "^k2",
        "^k2",
        "endturn",
        "4/1",
        "l2h2",
        "h2g2",
        "endturn",
        "1/5",
        "^k2",
        "endturn",
        "6/4",
        "f1l1",
        "f1j1",
        "endturn",
        "6/6",
        "^k2",
        "^k2",
        "^k2"
      )
      playActionStrs(actionStrs) must beValid.like { g =>
        g.situation.board.history.score must_== Score(0, 15)
        g.situation.end must_== true
        g.situation.winner must_== Some(Player.P2)
        g.situation.status must_== Some(Status.BackgammonWin)
        g.situation.board.pieceInOpponentsHome(Player.P1) must_== true
      }
    }
  }

}
